<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.rickandmorty&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.rickandmorty&quot;&#10;        minSdk = 28&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.navigation.compose)&#10;    implementation(libs.lifecycle.viewmodel.compose)&#10;&#10;    // Retrofit + OkHttp + Moshi&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.moshi:moshi-kotlin:1.15.1&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-moshi:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;&#10;    // Paging 3 + Compose integration&#10;    implementation(libs.paging.runtime)&#10;    implementation(libs.paging.compose)&#10;&#10;    // Coil for images&#10;    implementation(libs.coil.compose)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.rickandmorty&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.rickandmorty&quot;&#10;        minSdk = 28&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.navigation.compose)&#10;    implementation(libs.lifecycle.viewmodel.compose)&#10;&#10;    // Retrofit + OkHttp + Moshi&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.moshi:moshi-kotlin:1.15.1&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-moshi:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;&#10;    // Paging 3 + Compose integration&#10;    implementation(libs.paging.runtime)&#10;    implementation(libs.paging.compose)&#10;&#10;    // Coil for images&#10;    implementation(libs.coil.compose)&#10;&#10;    // Koin for dependency injection&#10;    implementation(libs.koin.core)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.App&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/App.kt" />
              <option name="updatedContent" value="package com.example.rickandmorty&#10;&#10;import android.app.Application&#10;import com.example.rickandmorty.di.appModule&#10;import org.koin.android.ext.koin.androidContext&#10;import org.koin.core.context.startKoin&#10;&#10;class App : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        startKoin {&#10;            androidContext(this@App)&#10;            modules(appModule)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/MainActivity.kt" />
              <option name="originalContent" value="package com.example.rickandmorty&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.rickandmorty.ui.screens.CharacterDetailScreen&#10;import com.example.rickandmorty.ui.screens.CharactersListScreen&#10;import com.example.rickandmorty.ui.theme.AppTheme&#10;import org.koin.android.ext.koin.androidContext&#10;import org.koin.core.context.startKoin&#10;import com.example.rickandmorty.di.appModule&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        startKoin {&#10;            androidContext(this@MainActivity)&#10;            modules(appModule)&#10;        }&#10;        setContent {&#10;            AppTheme {&#10;                Surface(color = MaterialTheme.colorScheme.background) {&#10;                    AppNav()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppNav() {&#10;    val navController = rememberNavController()&#10;    NavHost(navController = navController, startDestination = &quot;list&quot;) {&#10;        composable(&quot;list&quot;) {&#10;            CharactersListScreen(onCharacterClick = { charId -&gt;&#10;                navController.navigate(&quot;detail/$charId&quot;)&#10;            })&#10;        }&#10;        composable(&quot;detail/{id}&quot;) { backStackEntry -&gt;&#10;            val id = backStackEntry.arguments?.getString(&quot;id&quot;)?.toIntOrNull() ?: 0&#10;            CharacterDetailScreen(id = id, onBack = { navController.popBackStack() })&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.rickandmorty.ui.screens.CharacterDetailScreen&#10;import com.example.rickandmorty.ui.screens.CharactersListScreen&#10;import com.example.rickandmorty.ui.theme.AppTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            AppTheme {&#10;                Surface(color = MaterialTheme.colorScheme.background) {&#10;                    AppNav()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AppNav() {&#10;    val navController = rememberNavController()&#10;    NavHost(navController = navController, startDestination = &quot;list&quot;) {&#10;        composable(&quot;list&quot;) {&#10;            CharactersListScreen(onCharacterClick = { charId -&gt;&#10;                navController.navigate(&quot;detail/$charId&quot;)&#10;            })&#10;        }&#10;        composable(&quot;detail/{id}&quot;) { backStackEntry -&gt;&#10;            val id = backStackEntry.arguments?.getString(&quot;id&quot;)?.toIntOrNull() ?: 0&#10;            CharacterDetailScreen(id = id, onBack = { navController.popBackStack() })&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ServiceLocator.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ServiceLocator.kt" />
              <option name="originalContent" value="package com.example.rickandmorty&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.create&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;&#10;object ServiceLocator {&#10;    private val moshi by lazy { Moshi.Builder().add(KotlinJsonAdapterFactory()).build() }&#10;&#10;    private val client by lazy {&#10;        OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BASIC&#10;            })&#10;            .build()&#10;    }&#10;&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://rickandmortyapi.com/api/&quot;)&#10;            .client(client)&#10;            .addConverterFactory(MoshiConverterFactory.create(moshi))&#10;            .build()&#10;    }&#10;&#10;    val api: RickAndMortyApi by lazy { retrofit.create() }&#10;&#10;    val repository: CharactersRepository by lazy { CharactersRepository(api) }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun charactersViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                if (modelClass.isAssignableFrom(CharactersViewModel::class.java)) {&#10;                    return CharactersViewModel(repository) as T&#10;                }&#10;                throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;            }&#10;        }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.create&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;&#10;object ServiceLocator {&#10;    private val moshi by lazy { Moshi.Builder().add(KotlinJsonAdapterFactory()).build() }&#10;&#10;    private val client by lazy {&#10;        OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BASIC&#10;            })&#10;            .build()&#10;    }&#10;&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://rickandmortyapi.com/api/&quot;)&#10;            .client(client)&#10;            .addConverterFactory(MoshiConverterFactory.create(moshi))&#10;            .build()&#10;    }&#10;&#10;    val api: RickAndMortyApi by lazy { retrofit.create() }&#10;&#10;    val repository: CharactersRepository by lazy { CharactersRepository(api) }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun charactersViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                if (modelClass.isAssignableFrom(CharactersViewModel::class.java)) {&#10;                    return CharactersViewModel(repository) as T&#10;                }&#10;                throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;            }&#10;        }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun characterDetailViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return com.example.rickandmorty.viewmodel.CharacterDetailViewModel(repository) as T&#10;            }&#10;        }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/data/repo/CharactersRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/data/repo/CharactersRepository.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.data.repo&#10;&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.paging.CharactersPagingSource&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class CharactersRepository(&#10;    private val api: RickAndMortyApi&#10;) {&#10;    fun pagedCharacters(): Flow&lt;PagingData&lt;Character&gt;&gt; =&#10;        Pager(&#10;            config = PagingConfig(pageSize = 20, enablePlaceholders = false),&#10;            pagingSourceFactory = { CharactersPagingSource(api) }&#10;        ).flow&#10;&#10;    suspend fun getAllCharacters(): List&lt;Character&gt; {&#10;        val characters = mutableListOf&lt;Character&gt;()&#10;        var page = 1&#10;        var hasNextPage = true&#10;        while (hasNextPage) {&#10;            val response = api.getCharacters(page)&#10;            characters.addAll(response.results)&#10;            hasNextPage = response.info.next != null&#10;            page++&#10;        }&#10;        return characters&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.data.repo&#10;&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.paging.CharactersPagingSource&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class CharactersRepository(&#10;    private val api: RickAndMortyApi&#10;) {&#10;    fun pagedCharacters(): Flow&lt;PagingData&lt;Character&gt;&gt; =&#10;        Pager(&#10;            config = PagingConfig(pageSize = 20, enablePlaceholders = false),&#10;            pagingSourceFactory = { CharactersPagingSource(api) }&#10;        ).flow&#10;&#10;    suspend fun getAllCharacters(): List&lt;Character&gt; {&#10;        val characters = mutableListOf&lt;Character&gt;()&#10;        var page = 1&#10;        var hasNextPage = true&#10;        while (hasNextPage) {&#10;            val response = api.getCharacters(page)&#10;            characters.addAll(response.results)&#10;            hasNextPage = response.info.next != null&#10;            page++&#10;        }&#10;        return characters&#10;    }&#10;&#10;    suspend fun getCharacterById(id: Int): Character = api.getCharacterById(id)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/di/KoinModules.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/di/KoinModules.kt" />
              <option name="updatedContent" value="package com.example.rickandmorty.di&#10;&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import com.example.rickandmorty.viewmodel.CharacterDetailViewModel&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import org.koin.androidx.viewmodel.dsl.viewModel&#10;import org.koin.dsl.module&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory&#10;&#10;val appModule = module {&#10;    single {&#10;        Moshi.Builder().add(KotlinJsonAdapterFactory()).build()&#10;    }&#10;    single {&#10;        OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BASIC&#10;            })&#10;            .build()&#10;    }&#10;    single {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://rickandmortyapi.com/api/&quot;)&#10;            .client(get())&#10;            .addConverterFactory(MoshiConverterFactory.create(get()))&#10;            .build()&#10;    }&#10;    single&lt;RickAndMortyApi&gt; { get&lt;Retrofit&gt;().create(RickAndMortyApi::class.java) }&#10;    single { CharactersRepository(get()) }&#10;    viewModel { CharactersViewModel(get()) }&#10;    viewModel { CharacterDetailViewModel(get()) }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharacterDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharacterDetailScreen.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import com.example.rickandmorty.ServiceLocator&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.rickandmorty.viewmodel.CharacterDetailViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharacterDetailScreen(id: Int, onBack: () -&gt; Unit) {&#10;    val vm: CharacterDetailViewModel = viewModel(factory = ServiceLocator.characterDetailViewModelFactory())&#10;    val character by vm.character.collectAsState()&#10;    var loading by remember { mutableStateOf(true) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(id) {&#10;        loading = true&#10;        error = null&#10;        try {&#10;            vm.fetchCharacter(id)&#10;        } catch (t: Throwable) {&#10;            error = t.localizedMessage&#10;        } finally {&#10;            loading = false&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(character?.name ?: &quot;Character&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) { Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;) }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(modifier = Modifier.padding(padding).fillMaxSize(), contentAlignment = Alignment.Center) {&#10;            when {&#10;                loading -&gt; {&#10;                    CircularProgressIndicator()&#10;                }&#10;                error != null -&gt; {&#10;                    Text(&quot;Erro: $error&quot;, color = MaterialTheme.colorScheme.error)&#10;                }&#10;                character != null -&gt; {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        AsyncImage(model = character!!.image, contentDescription = character!!.name, modifier = Modifier.size(200.dp))&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(text = character!!.name, style = MaterialTheme.typography.headlineMedium)&#10;                        Text(text = &quot;Status: ${character!!.status}&quot;)&#10;                        Text(text = &quot;Espécie: ${character!!.species}&quot;)&#10;                        Text(text = &quot;Gênero: ${character!!.gender}&quot;)&#10;                        Text(text = &quot;Origem: ${character!!.origin.name}&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import org.koin.androidx.compose.getViewModel&#10;import com.example.rickandmorty.viewmodel.CharacterDetailViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharacterDetailScreen(id: Int, onBack: () -&gt; Unit) {&#10;    val vm: CharacterDetailViewModel = getViewModel()&#10;    val character by vm.character.collectAsState()&#10;    var loading by remember { mutableStateOf(true) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(id) {&#10;        loading = true&#10;        error = null&#10;        try {&#10;            vm.fetchCharacter(id)&#10;        } catch (t: Throwable) {&#10;            error = t.localizedMessage&#10;        } finally {&#10;            loading = false&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(character?.name ?: &quot;Character&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) { Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;) }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(modifier = Modifier.padding(padding).fillMaxSize(), contentAlignment = Alignment.Center) {&#10;            when {&#10;                loading -&gt; {&#10;                    CircularProgressIndicator()&#10;                }&#10;                error != null -&gt; {&#10;                    Text(&quot;Erro: $error&quot;, color = MaterialTheme.colorScheme.error)&#10;                }&#10;                character != null -&gt; {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        AsyncImage(model = character!!.image, contentDescription = character!!.name, modifier = Modifier.size(200.dp))&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(text = character!!.name, style = MaterialTheme.typography.headlineMedium)&#10;                        Text(text = &quot;Status: ${character!!.status}&quot;)&#10;                        Text(text = &quot;Espécie: ${character!!.species}&quot;)&#10;                        Text(text = &quot;Gênero: ${character!!.gender}&quot;)&#10;                        Text(text = &quot;Origem: ${character!!.origin.name}&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharactersListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharactersListScreen.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.paging.LoadState&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import coil.compose.AsyncImage&#10;import com.example.rickandmorty.ServiceLocator&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharactersListScreen(&#10;    onCharacterClick: (Int) -&gt; Unit,&#10;    vm: CharactersViewModel = viewModel(factory = ServiceLocator.charactersViewModelFactory())&#10;) {&#10;    val items = vm.characters.collectAsLazyPagingItems()&#10;    val allCharacters by vm.allCharacters.collectAsState()&#10;    var showAll by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Rick &amp; Morty&quot;) },&#10;                actions = {&#10;                    Button(onClick = {&#10;                        showAll = !showAll&#10;                        if (showAll) vm.fetchAllCharacters()&#10;                    }) {&#10;                        Text(if (showAll) &quot;Ver Paginado&quot; else &quot;Ver Todos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(Modifier.fillMaxSize().padding(padding)) {&#10;            if (showAll) {&#10;                if (allCharacters.isEmpty()) {&#10;                    Loading()&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(allCharacters) { character -&gt;&#10;                            CharacterCard(character = character) {&#10;                                onCharacterClick(character.id)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                if (items.loadState.refresh is LoadState.Loading) {&#10;                    Loading()&#10;                } else if (items.loadState.refresh is LoadState.Error) {&#10;                    val e = (items.loadState.refresh as LoadState.Error).error&#10;                    ErrorView(message = e.localizedMessage ?: &quot;Unknown error&quot;) { items.retry() }&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(items.itemCount) { index -&gt;&#10;                            val character = items[index]&#10;                            character?.let {&#10;                                CharacterCard(character = it) {&#10;                                    onCharacterClick(it.id)&#10;                                }&#10;                            }&#10;                        }&#10;                        // Append loading / error&#10;                        when (val state = items.loadState.append) {&#10;                            is LoadState.Loading -&gt; {&#10;                                item { Loading(modifier = Modifier.fillMaxWidth().padding(16.dp)) }&#10;                            }&#10;                            is LoadState.Error -&gt; {&#10;                                item {&#10;                                    ErrorView(&#10;                                        message = state.error.localizedMessage ?: &quot;Error&quot;,&#10;                                        onRetry = { items.retry() }&#10;                                    )&#10;                                }&#10;                            }&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CharacterCard(character: Character, onClick: () -&gt; Unit) {&#10;    ElevatedCard(&#10;        modifier = Modifier.fillMaxWidth().clickable { onClick() }&#10;    ) {&#10;        AsyncImage(&#10;            model = character.image,&#10;            contentDescription = character.name,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp)&#10;        )&#10;        Column(Modifier.padding(12.dp)) {&#10;            Text(character.name, style = MaterialTheme.typography.titleMedium, maxLines = 1, overflow = TextOverflow.Ellipsis)&#10;            Spacer(Modifier.height(4.dp))&#10;            Text(&quot;${character.species} • ${character.status}&quot;, style = MaterialTheme.typography.bodyMedium, maxLines = 1, overflow = TextOverflow.Ellipsis)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun Loading(modifier: Modifier = Modifier) {&#10;    Box(modifier = modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorView(message: String, onRetry: () -&gt; Unit) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(message)&#10;        Spacer(Modifier.height(8.dp))&#10;        Button(onClick = onRetry) { Text(&quot;Retry&quot;) }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.paging.LoadState&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import coil.compose.AsyncImage&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import org.koin.androidx.compose.getViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharactersListScreen(&#10;    onCharacterClick: (Int) -&gt; Unit,&#10;    vm: CharactersViewModel = getViewModel()&#10;) {&#10;    val items = vm.characters.collectAsLazyPagingItems()&#10;    val allCharacters by vm.allCharacters.collectAsState()&#10;    var showAll by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Rick &amp; Morty&quot;) },&#10;                actions = {&#10;                    Button(onClick = {&#10;                        showAll = !showAll&#10;                        if (showAll) vm.fetchAllCharacters()&#10;                    }) {&#10;                        Text(if (showAll) &quot;Ver Paginado&quot; else &quot;Ver Todos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(Modifier.fillMaxSize().padding(padding)) {&#10;            if (showAll) {&#10;                if (allCharacters.isEmpty()) {&#10;                    Loading()&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(allCharacters) { character -&gt;&#10;                            CharacterCard(character = character) {&#10;                                onCharacterClick(character.id)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                if (items.loadState.refresh is LoadState.Loading) {&#10;                    Loading()&#10;                } else if (items.loadState.refresh is LoadState.Error) {&#10;                    val e = (items.loadState.refresh as LoadState.Error).error&#10;                    ErrorView(message = e.localizedMessage ?: &quot;Unknown error&quot;) { items.retry() }&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(items.itemCount) { index -&gt;&#10;                            val character = items[index]&#10;                            character?.let {&#10;                                CharacterCard(character = it) {&#10;                                    onCharacterClick(it.id)&#10;                                }&#10;                            }&#10;                        }&#10;                        // Append loading / error&#10;                        when (val state = items.loadState.append) {&#10;                            is LoadState.Loading -&gt; {&#10;                                item { Loading(modifier = Modifier.fillMaxWidth().padding(16.dp)) }&#10;                            }&#10;                            is LoadState.Error -&gt; {&#10;                                item {&#10;                                    ErrorView(&#10;                                        message = state.error.localizedMessage ?: &quot;Error&quot;,&#10;                                        onRetry = { items.retry() }&#10;                                    )&#10;                                }&#10;                            }&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CharacterCard(character: Character, onClick: () -&gt; Unit) {&#10;    ElevatedCard(&#10;        modifier = Modifier.fillMaxWidth().clickable { onClick() }&#10;    ) {&#10;        AsyncImage(&#10;            model = character.image,&#10;            contentDescription = character.name,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp)&#10;        )&#10;        Column(Modifier.padding(12.dp)) {&#10;            Text(character.name, style = MaterialTheme.typography.titleMedium, maxLines = 1, overflow = TextOverflow.Ellipsis)&#10;            Spacer(Modifier.height(4.dp))&#10;            Text(&quot;${character.species} • ${character.status}&quot;, style = MaterialTheme.typography.bodyMedium, maxLines = 1, overflow = TextOverflow.Ellipsis)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun Loading(modifier: Modifier = Modifier) {&#10;    Box(modifier = modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorView(message: String, onRetry: () -&gt; Unit) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(message)&#10;        Spacer(Modifier.height(8.dp))&#10;        Button(onClick = onRetry) { Text(&quot;Retry&quot;) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/viewmodel/CharacterDetailViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/viewmodel/CharacterDetailViewModel.kt" />
              <option name="updatedContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class CharacterDetailViewModel(&#10;    private val repository: CharactersRepository&#10;) : ViewModel() {&#10;    private val _character = MutableStateFlow&lt;Character?&gt;(null)&#10;    val character: StateFlow&lt;Character?&gt; = _character&#10;&#10;    fun fetchCharacter(id: Int) {&#10;        viewModelScope.launch {&#10;            _character.value = repository.getCharacterById(id)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/viewmodel/CharactersViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/viewmodel/CharactersViewModel.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class CharactersViewModel(&#10;    repository: CharactersRepository&#10;) : ViewModel() {&#10;    val characters: Flow&lt;PagingData&lt;Character&gt;&gt; = repository.pagedCharacters().cachedIn(viewModelScope)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;&#10;class CharactersViewModel(&#10;    private val repository: CharactersRepository&#10;) : ViewModel() {&#10;    val characters: Flow&lt;PagingData&lt;Character&gt;&gt; = repository.pagedCharacters().cachedIn(viewModelScope)&#10;&#10;    private val _allCharacters = MutableStateFlow&lt;List&lt;Character&gt;&gt;(emptyList())&#10;    val allCharacters: StateFlow&lt;List&lt;Character&gt;&gt; = _allCharacters&#10;&#10;    fun fetchAllCharacters() {&#10;        viewModelScope.launch {&#10;            _allCharacters.value = repository.getAllCharacters()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.7.2&quot;&#10;kotlin = &quot;2.0.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit2 = &quot;2.11.0&quot;&#10;kotlinx-serialization-json = &quot;1.7.1&quot;&#10;retrofit2-kotlinx-serialization-converter = &quot;1.0.0&quot;&#10;okhttp3-logging-interceptor = &quot;4.12.0&quot;&#10;paging-runtime = &quot;3.3.2&quot;&#10;paging-compose = &quot;3.3.2&quot;&#10;coil-compose = &quot;2.6.0&quot;&#10;lifecycle-viewmodel-compose = &quot;2.8.4&quot;&#10;navigation-compose = &quot;2.7.7&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version = &quot;1.2.1&quot; }&#10;retrofit2 = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit2&quot; }&#10;kotlinx-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;kotlinx-serialization-json&quot; }&#10;retrofit2-kotlinx-serialization-converter = { group = &quot;com.jakewharton.retrofit&quot;, name = &quot;retrofit2-kotlinx-serialization-converter&quot;, version.ref = &quot;retrofit2-kotlinx-serialization-converter&quot; }&#10;okhttp3-logging-interceptor = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp3-logging-interceptor&quot; }&#10;paging-runtime = { group = &quot;androidx.paging&quot;, name = &quot;paging-runtime&quot;, version.ref = &quot;paging-runtime&quot; }&#10;paging-compose = { group = &quot;androidx.paging&quot;, name = &quot;paging-compose&quot;, version.ref = &quot;paging-compose&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil-compose&quot; }&#10;lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycle-viewmodel-compose&quot; }&#10;navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigation-compose&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.7.2&quot;&#10;kotlin = &quot;2.0.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit2 = &quot;2.11.0&quot;&#10;kotlinx-serialization-json = &quot;1.7.1&quot;&#10;retrofit2-kotlinx-serialization-converter = &quot;1.0.0&quot;&#10;okhttp3-logging-interceptor = &quot;4.12.0&quot;&#10;paging-runtime = &quot;3.3.2&quot;&#10;paging-compose = &quot;3.3.2&quot;&#10;coil-compose = &quot;2.6.0&quot;&#10;lifecycle-viewmodel-compose = &quot;2.8.4&quot;&#10;navigation-compose = &quot;2.7.7&quot;&#10;koin = &quot;3.5.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version = &quot;1.2.1&quot; }&#10;retrofit2 = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit2&quot; }&#10;kotlinx-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;kotlinx-serialization-json&quot; }&#10;retrofit2-kotlinx-serialization-converter = { group = &quot;com.jakewharton.retrofit&quot;, name = &quot;retrofit2-kotlinx-serialization-converter&quot;, version.ref = &quot;retrofit2-kotlinx-serialization-converter&quot; }&#10;okhttp3-logging-interceptor = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp3-logging-interceptor&quot; }&#10;paging-runtime = { group = &quot;androidx.paging&quot;, name = &quot;paging-runtime&quot;, version.ref = &quot;paging-runtime&quot; }&#10;paging-compose = { group = &quot;androidx.paging&quot;, name = &quot;paging-compose&quot;, version.ref = &quot;paging-compose&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil-compose&quot; }&#10;lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycle-viewmodel-compose&quot; }&#10;navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigation-compose&quot; }&#10;koin-core = { group = &quot;io.insert-koin&quot;, name = &quot;koin-core&quot;, version = &quot;3.5.3&quot; }&#10;koin-android = { group = &quot;io.insert-koin&quot;, name = &quot;koin-android&quot;, version = &quot;3.5.3&quot; }&#10;koin-androidx-compose = { group = &quot;io.insert-koin&quot;, name = &quot;koin-androidx-compose&quot;, version = &quot;3.5.3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>