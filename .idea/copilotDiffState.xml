<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.rickandmorty&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.rickandmorty&quot;&#10;        minSdk = 28&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.navigation.compose)&#10;    implementation(libs.lifecycle.viewmodel.compose)&#10;&#10;    // Retrofit + OkHttp + Moshi&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.moshi:moshi-kotlin:1.15.1&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-moshi:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;&#10;    // Paging 3 + Compose integration&#10;    implementation(libs.paging.runtime)&#10;    implementation(libs.paging.compose)&#10;&#10;    // Coil for images&#10;    implementation(libs.coil.compose)&#10;&#10;    // Koin for dependency injection&#10;    implementation(libs.koin.core)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;&#10;    // Unit Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.10&quot;)&#10;    testImplementation(&quot;app.cash.turbine:turbine:1.0.0&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.rickandmorty&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.rickandmorty&quot;&#10;        minSdk = 28&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.navigation.compose)&#10;    implementation(libs.lifecycle.viewmodel.compose)&#10;&#10;    // Retrofit + OkHttp + Moshi&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.moshi:moshi-kotlin:1.15.1&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-moshi:2.11.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;&#10;    // Paging 3 + Compose integration&#10;    implementation(libs.paging.runtime)&#10;    implementation(libs.paging.compose)&#10;&#10;    // Coil for images&#10;    implementation(libs.coil.compose)&#10;&#10;    // Koin for dependency injection&#10;    implementation(libs.koin.core)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;&#10;    // Unit Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.10&quot;)&#10;    testImplementation(&quot;app.cash.turbine:turbine:1.0.0&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/App.kt" />
              <option name="updatedContent" value="package com.example.rickandmorty&#10;&#10;import android.app.Application&#10;import com.example.rickandmorty.di.appModule&#10;import org.koin.android.ext.koin.androidContext&#10;import org.koin.core.context.startKoin&#10;&#10;class App : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        startKoin {&#10;            androidContext(this@App)&#10;            modules(appModule)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ServiceLocator.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ServiceLocator.kt" />
              <option name="originalContent" value="package com.example.rickandmorty&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.create&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;&#10;object ServiceLocator {&#10;    private val moshi by lazy { Moshi.Builder().add(KotlinJsonAdapterFactory()).build() }&#10;&#10;    private val client by lazy {&#10;        OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BASIC&#10;            })&#10;            .build()&#10;    }&#10;&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://rickandmortyapi.com/api/&quot;)&#10;            .client(client)&#10;            .addConverterFactory(MoshiConverterFactory.create(moshi))&#10;            .build()&#10;    }&#10;&#10;    val api: RickAndMortyApi by lazy { retrofit.create() }&#10;&#10;    val repository: CharactersRepository by lazy { CharactersRepository(api) }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun charactersViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                if (modelClass.isAssignableFrom(CharactersViewModel::class.java)) {&#10;                    return CharactersViewModel(repository) as T&#10;                }&#10;                throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;            }&#10;        }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun characterDetailViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return com.example.rickandmorty.viewmodel.CharacterDetailViewModel(repository) as T&#10;            }&#10;        }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.rickandmorty.data.api.RickAndMortyApi&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.create&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;import com.example.rickandmorty.domain.GetCharactersUseCase&#10;import com.example.rickandmorty.domain.GetCharacterDetailUseCase&#10;&#10;object ServiceLocator {&#10;    private val moshi by lazy { Moshi.Builder().add(KotlinJsonAdapterFactory()).build() }&#10;&#10;    private val client by lazy {&#10;        OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BASIC&#10;            })&#10;            .build()&#10;    }&#10;&#10;    private val retrofit by lazy {&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://rickandmortyapi.com/api/&quot;)&#10;            .client(client)&#10;            .addConverterFactory(MoshiConverterFactory.create(moshi))&#10;            .build()&#10;    }&#10;&#10;    val api: RickAndMortyApi by lazy { retrofit.create() }&#10;&#10;    val repository: CharactersRepository by lazy { CharactersRepository(api) }&#10;&#10;    val getCharactersUseCase: GetCharactersUseCase by lazy { GetCharactersUseCase(repository) }&#10;    val getCharacterDetailUseCase: GetCharacterDetailUseCase by lazy { GetCharacterDetailUseCase(repository) }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun charactersViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                if (modelClass.isAssignableFrom(CharactersViewModel::class.java)) {&#10;                    return CharactersViewModel(getCharactersUseCase, repository) as T&#10;                }&#10;                throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;            }&#10;        }&#10;&#10;    @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;    fun characterDetailViewModelFactory(): ViewModelProvider.Factory =&#10;        object : ViewModelProvider.Factory {&#10;            override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;                return com.example.rickandmorty.viewmodel.CharacterDetailViewModel(getCharacterDetailUseCase) as T&#10;            }&#10;        }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ServiceLocator.kt.removed">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ServiceLocator.kt.removed" />
              <option name="updatedContent" value="Arquivo removido. Toda a injeção de dependência deve ser feita pelo Koin. Use koinViewModel nas telas e configure tudo no appModule." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/rickandmorty/viewmodel/CharactersViewModelTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/rickandmorty/viewmodel/CharactersViewModelTest.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import app.cash.turbine.test&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.domain.GetCharactersUseCase&#10;import io.mockk.coEvery&#10;import io.mockk.mockk&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;@OptIn(ExperimentalCoroutinesApi::class)&#10;class CharactersViewModelTest {&#10;    private lateinit var getCharactersUseCase: GetCharactersUseCase&#10;    private lateinit var viewModel: CharactersViewModel&#10;&#10;    @Before&#10;    fun setup() {&#10;        getCharactersUseCase = mockk()&#10;        viewModel = CharactersViewModel(getCharactersUseCase, mockk(relaxed = true))&#10;    }&#10;&#10;    @Test&#10;    fun `fetchAllCharacters should update charactersList`() = runTest {&#10;        val fakeList = listOf(Character(1, &quot;Rick&quot;, &quot;Alive&quot;, &quot;Human&quot;, &quot;&quot;, &quot;Male&quot;, &quot;url&quot;, mockk(), mockk()))&#10;        coEvery { getCharactersUseCase.invoke() } returns fakeList&#10;&#10;        viewModel.fetchAllCharacters()&#10;&#10;        viewModel.charactersList.test {&#10;            assertEquals(fakeList, awaitItem())&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import app.cash.turbine.test&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.domain.GetCharactersUseCase&#10;import io.mockk.coEvery&#10;import io.mockk.mockk&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Before&#10;import org.junit.Test&#10;&#10;@OptIn(ExperimentalCoroutinesApi::class)&#10;class CharactersViewModelTest {&#10;    private lateinit var getCharactersUseCase: GetCharactersUseCase&#10;    private lateinit var viewModel: CharactersViewModel&#10;&#10;    @Before&#10;    fun setup() {&#10;        getCharactersUseCase = mockk()&#10;        viewModel = CharactersViewModel(getCharactersUseCase, mockk(relaxed = true))&#10;    }&#10;&#10;    @Test&#10;    fun `fetchAllCharacters should update charactersList`() = runTest {&#10;        val fakeList = listOf(Character(1, &quot;Rick&quot;, &quot;Alive&quot;, &quot;Human&quot;, &quot;&quot;, &quot;Male&quot;, &quot;url&quot;, mockk(), mockk()))&#10;        coEvery { getCharactersUseCase.invoke() } returns fakeList&#10;&#10;        viewModel.fetchAllCharacters()&#10;&#10;        viewModel.charactersList.test {&#10;            assertEquals(fakeList, awaitItem())&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.7.2&quot;&#10;kotlin = &quot;2.0.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit2 = &quot;2.11.0&quot;&#10;kotlinx-serialization-json = &quot;1.7.1&quot;&#10;retrofit2-kotlinx-serialization-converter = &quot;1.0.0&quot;&#10;okhttp3-logging-interceptor = &quot;4.12.0&quot;&#10;paging-runtime = &quot;3.3.2&quot;&#10;paging-compose = &quot;3.3.2&quot;&#10;coil-compose = &quot;2.6.0&quot;&#10;lifecycle-viewmodel-compose = &quot;2.8.4&quot;&#10;navigation-compose = &quot;2.7.7&quot;&#10;koin = &quot;3.5.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version = &quot;1.2.1&quot; }&#10;retrofit2 = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit2&quot; }&#10;kotlinx-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;kotlinx-serialization-json&quot; }&#10;retrofit2-kotlinx-serialization-converter = { group = &quot;com.jakewharton.retrofit&quot;, name = &quot;retrofit2-kotlinx-serialization-converter&quot;, version.ref = &quot;retrofit2-kotlinx-serialization-converter&quot; }&#10;okhttp3-logging-interceptor = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp3-logging-interceptor&quot; }&#10;paging-runtime = { group = &quot;androidx.paging&quot;, name = &quot;paging-runtime&quot;, version.ref = &quot;paging-runtime&quot; }&#10;paging-compose = { group = &quot;androidx.paging&quot;, name = &quot;paging-compose&quot;, version.ref = &quot;paging-compose&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil-compose&quot; }&#10;lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycle-viewmodel-compose&quot; }&#10;navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigation-compose&quot; }&#10;koin-core = { group = &quot;io.insert-koin&quot;, name = &quot;koin-core&quot;, version = &quot;3.5.3&quot; }&#10;koin-android = { group = &quot;io.insert-koin&quot;, name = &quot;koin-android&quot;, version = &quot;3.5.3&quot; }&#10;koin-androidx-compose = { group = &quot;io.insert-koin&quot;, name = &quot;koin-androidx-compose&quot;, version = &quot;3.5.3&quot; }&#10;&#10;[test]&#10;junit = &quot;junit:junit:4.13.2&quot;&#10;mockk = &quot;io.mockk:mockk:1.13.10&quot;&#10;turbine = &quot;app.cash.turbine:turbine:1.0.0&quot;&#10;&#10;[androidTest]&#10;junit = &quot;junit:junit:4.13.2&quot;&#10;mockk = &quot;io.mockk:mockk-android:1.13.10&quot;&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.7.2&quot;&#10;kotlin = &quot;2.0.0&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.04.01&quot;&#10;retrofit2 = &quot;2.11.0&quot;&#10;kotlinx-serialization-json = &quot;1.7.1&quot;&#10;retrofit2-kotlinx-serialization-converter = &quot;1.0.0&quot;&#10;okhttp3-logging-interceptor = &quot;4.12.0&quot;&#10;paging-runtime = &quot;3.3.2&quot;&#10;paging-compose = &quot;3.3.2&quot;&#10;coil-compose = &quot;2.6.0&quot;&#10;lifecycle-viewmodel-compose = &quot;2.8.4&quot;&#10;navigation-compose = &quot;2.7.7&quot;&#10;koin = &quot;3.5.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version = &quot;1.2.1&quot; }&#10;retrofit2 = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit2&quot; }&#10;kotlinx-serialization-json = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-serialization-json&quot;, version.ref = &quot;kotlinx-serialization-json&quot; }&#10;retrofit2-kotlinx-serialization-converter = { group = &quot;com.jakewharton.retrofit&quot;, name = &quot;retrofit2-kotlinx-serialization-converter&quot;, version.ref = &quot;retrofit2-kotlinx-serialization-converter&quot; }&#10;okhttp3-logging-interceptor = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp3-logging-interceptor&quot; }&#10;paging-runtime = { group = &quot;androidx.paging&quot;, name = &quot;paging-runtime&quot;, version.ref = &quot;paging-runtime&quot; }&#10;paging-compose = { group = &quot;androidx.paging&quot;, name = &quot;paging-compose&quot;, version.ref = &quot;paging-compose&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil-compose&quot; }&#10;lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycle-viewmodel-compose&quot; }&#10;navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigation-compose&quot; }&#10;koin-core = { group = &quot;io.insert-koin&quot;, name = &quot;koin-core&quot;, version = &quot;3.5.3&quot; }&#10;koin-android = { group = &quot;io.insert-koin&quot;, name = &quot;koin-android&quot;, version = &quot;3.5.3&quot; }&#10;koin-androidx-compose = { group = &quot;io.insert-koin&quot;, name = &quot;koin-androidx-compose&quot;, version = &quot;3.5.3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>