<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/App.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/App.kt" />
              <option name="updatedContent" value="package com.example.rickandmorty&#10;&#10;import android.app.Application&#10;import com.example.rickandmorty.di.appModule&#10;import org.koin.android.ext.koin.androidContext&#10;import org.koin.core.context.startKoin&#10;&#10;class App : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        startKoin {&#10;            androidContext(this@App)&#10;            modules(appModule)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharacterDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharacterDetailScreen.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import org.koin.androidx.compose.getViewModel&#10;import com.example.rickandmorty.viewmodel.CharacterDetailViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharacterDetailScreen(id: Int, onBack: () -&gt; Unit) {&#10;    val vm: CharacterDetailViewModel = getViewModel()&#10;    val character by vm.character.collectAsState()&#10;    var loading by remember { mutableStateOf(true) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(id) {&#10;        loading = true&#10;        error = null&#10;        try {&#10;            vm.fetchCharacter(id)&#10;        } catch (t: Throwable) {&#10;            error = t.localizedMessage&#10;        } finally {&#10;            loading = false&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(character?.name ?: &quot;Character&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) { Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;) }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(modifier = Modifier.padding(padding).fillMaxSize(), contentAlignment = Alignment.Center) {&#10;            when {&#10;                loading -&gt; {&#10;                    CircularProgressIndicator()&#10;                }&#10;                error != null -&gt; {&#10;                    Text(&quot;Erro: $error&quot;, color = MaterialTheme.colorScheme.error)&#10;                }&#10;                character != null -&gt; {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        AsyncImage(model = character!!.image, contentDescription = character!!.name, modifier = Modifier.size(200.dp))&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(text = character!!.name, style = MaterialTheme.typography.headlineMedium)&#10;                        Text(text = &quot;Status: ${character!!.status}&quot;)&#10;                        Text(text = &quot;Espécie: ${character!!.species}&quot;)&#10;                        Text(text = &quot;Gênero: ${character!!.gender}&quot;)&#10;                        Text(text = &quot;Origem: ${character!!.origin.name}&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import org.koin.androidx.compose.koinViewModel&#10;import com.example.rickandmorty.viewmodel.CharacterDetailViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharacterDetailScreen(id: Int, onBack: () -&gt; Unit) {&#10;    val vm: CharacterDetailViewModel = koinViewModel()&#10;    val character by vm.character.collectAsState()&#10;    var loading by remember { mutableStateOf(true) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    LaunchedEffect(id) {&#10;        loading = true&#10;        error = null&#10;        try {&#10;            vm.fetchCharacter(id)&#10;        } catch (t: Throwable) {&#10;            error = t.localizedMessage&#10;        } finally {&#10;            loading = false&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(character?.name ?: &quot;Character&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onBack) { Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;) }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(modifier = Modifier.padding(padding).fillMaxSize(), contentAlignment = Alignment.Center) {&#10;            when {&#10;                loading -&gt; {&#10;                    CircularProgressIndicator()&#10;                }&#10;                error != null -&gt; {&#10;                    Text(&quot;Erro: $error&quot;, color = MaterialTheme.colorScheme.error)&#10;                }&#10;                character != null -&gt; {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        AsyncImage(model = character!!.image, contentDescription = character!!.name, modifier = Modifier.size(200.dp))&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(text = character!!.name, style = MaterialTheme.typography.headlineMedium)&#10;                        Text(text = &quot;Status: ${character!!.status}&quot;)&#10;                        Text(text = &quot;Espécie: ${character!!.species}&quot;)&#10;                        Text(text = &quot;Gênero: ${character!!.gender}&quot;)&#10;                        Text(text = &quot;Origem: ${character!!.origin.name}&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharactersListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/ui/screens/CharactersListScreen.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.paging.LoadState&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import coil.compose.AsyncImage&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import org.koin.androidx.compose.getViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharactersListScreen(&#10;    onCharacterClick: (Int) -&gt; Unit,&#10;    vm: CharactersViewModel = getViewModel()&#10;) {&#10;    val items = vm.characters.collectAsLazyPagingItems()&#10;    val allCharacters by vm.charactersList.collectAsState()&#10;    var showAll by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Rick &amp; Morty&quot;) },&#10;                actions = {&#10;                    Button(onClick = {&#10;                        showAll = !showAll&#10;                        if (showAll) vm.fetchAllCharacters()&#10;                    }) {&#10;                        Text(&#10;                            if (showAll)&#10;                                &quot;Pagination&quot;&#10;                            else&#10;                                &quot;See all&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(&#10;            Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;        ) {&#10;            if (showAll) {&#10;                if (allCharacters.isEmpty()) {&#10;                    Loading()&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(allCharacters) { character -&gt;&#10;                            CharacterCard(character = character) {&#10;                                onCharacterClick(character.id)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                if (items.loadState.refresh is LoadState.Loading) {&#10;                    Loading()&#10;                } else if (items.loadState.refresh is LoadState.Error) {&#10;                    val e = (items.loadState.refresh as LoadState.Error).error&#10;                    ErrorView(message = e.localizedMessage ?: &quot;Unknown error&quot;) { items.retry() }&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(items.itemCount) { index -&gt;&#10;                            val character = items[index]&#10;                            character?.let {&#10;                                CharacterCard(character = it) {&#10;                                    onCharacterClick(it.id)&#10;                                }&#10;                            }&#10;                        }&#10;                        // Append loading / error&#10;                        when (val state = items.loadState.append) {&#10;                            is LoadState.Loading -&gt; {&#10;                                item {&#10;                                    Loading(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .padding(16.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            is LoadState.Error -&gt; {&#10;                                item {&#10;                                    ErrorView(&#10;                                        message = state.error.localizedMessage ?: &quot;Error&quot;,&#10;                                        onRetry = { items.retry() }&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CharacterCard(character: Character, onClick: () -&gt; Unit) {&#10;    ElevatedCard(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;    ) {&#10;        AsyncImage(&#10;            model = character.image,&#10;            contentDescription = character.name,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp)&#10;        )&#10;        Column(Modifier.padding(12.dp)) {&#10;            Text(&#10;                character.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Spacer(Modifier.height(4.dp))&#10;            Text(&#10;                &quot;${character.species} • ${character.status}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun Loading(modifier: Modifier = Modifier) {&#10;    Box(modifier = modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorView(message: String, onRetry: () -&gt; Unit) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(message)&#10;        Spacer(Modifier.height(8.dp))&#10;        Button(onClick = onRetry) { Text(&quot;Retry&quot;) }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.ui.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.paging.LoadState&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import coil.compose.AsyncImage&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.viewmodel.CharactersViewModel&#10;import org.koin.androidx.compose.getViewModel&#10;import org.koin.androidx.compose.koinViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CharactersListScreen(&#10;    onCharacterClick: (Int) -&gt; Unit,&#10;    vm: CharactersViewModel = koinViewModel()&#10;) {&#10;    val items = vm.characters.collectAsLazyPagingItems()&#10;    val allCharacters by vm.charactersList.collectAsState()&#10;    var showAll by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Rick &amp; Morty&quot;) },&#10;                actions = {&#10;                    Button(onClick = {&#10;                        showAll = !showAll&#10;                        if (showAll) vm.fetchAllCharacters()&#10;                    }) {&#10;                        Text(&#10;                            if (showAll)&#10;                                &quot;Pagination&quot;&#10;                            else&#10;                                &quot;See all&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Box(&#10;            Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;        ) {&#10;            if (showAll) {&#10;                if (allCharacters.isEmpty()) {&#10;                    Loading()&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(allCharacters) { character -&gt;&#10;                            CharacterCard(character = character) {&#10;                                onCharacterClick(character.id)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                if (items.loadState.refresh is LoadState.Loading) {&#10;                    Loading()&#10;                } else if (items.loadState.refresh is LoadState.Error) {&#10;                    val e = (items.loadState.refresh as LoadState.Error).error&#10;                    ErrorView(message = e.localizedMessage ?: &quot;Unknown error&quot;) { items.retry() }&#10;                } else {&#10;                    LazyVerticalGrid(&#10;                        columns = GridCells.Adaptive(minSize = 140.dp),&#10;                        contentPadding = PaddingValues(8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.fillMaxSize()&#10;                    ) {&#10;                        items(items.itemCount) { index -&gt;&#10;                            val character = items[index]&#10;                            character?.let {&#10;                                CharacterCard(character = it) {&#10;                                    onCharacterClick(it.id)&#10;                                }&#10;                            }&#10;                        }&#10;                        // Append loading / error&#10;                        when (val state = items.loadState.append) {&#10;                            is LoadState.Loading -&gt; {&#10;                                item {&#10;                                    Loading(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .padding(16.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            is LoadState.Error -&gt; {&#10;                                item {&#10;                                    ErrorView(&#10;                                        message = state.error.localizedMessage ?: &quot;Error&quot;,&#10;                                        onRetry = { items.retry() }&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            else -&gt; {}&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CharacterCard(character: Character, onClick: () -&gt; Unit) {&#10;    ElevatedCard(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;    ) {&#10;        AsyncImage(&#10;            model = character.image,&#10;            contentDescription = character.name,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(160.dp)&#10;        )&#10;        Column(Modifier.padding(12.dp)) {&#10;            Text(&#10;                character.name,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Spacer(Modifier.height(4.dp))&#10;            Text(&#10;                &quot;${character.species} • ${character.status}&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun Loading(modifier: Modifier = Modifier) {&#10;    Box(modifier = modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;        CircularProgressIndicator()&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ErrorView(message: String, onRetry: () -&gt; Unit) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(message)&#10;        Spacer(Modifier.height(8.dp))&#10;        Button(onClick = onRetry) { Text(&quot;Retry&quot;) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/viewmodel/CharactersViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rickandmorty/viewmodel/CharactersViewModel.kt" />
              <option name="originalContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class CharactersViewModel(&#10;    private val repository: CharactersRepository&#10;) : ViewModel() {&#10;    val characters: Flow&lt;PagingData&lt;Character&gt;&gt; = repository.pagedCharacters().cachedIn(viewModelScope)&#10;&#10;    // Se quiser buscar todos os personagens sem paginação:&#10;    // suspend fun getAllCharacters(): List&lt;Character&gt; = repository.getAllCharacters()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rickandmorty.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import com.example.rickandmorty.data.model.Character&#10;import com.example.rickandmorty.data.repo.CharactersRepository&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;&#10;class CharactersViewModel(&#10;    private val repository: CharactersRepository&#10;) : ViewModel() {&#10;    private val _charactersList = MutableStateFlow&lt;List&lt;Character&gt;&gt;(emptyList())&#10;    val charactersList: StateFlow&lt;List&lt;Character&gt;&gt; = _charactersList&#10;&#10;    fun fetchAllCharacters() {&#10;        viewModelScope.launch {&#10;            val result = repository.getAllCharacters()&#10;            _charactersList.value = result&#10;        }&#10;    }&#10;&#10;    val characters: Flow&lt;PagingData&lt;Character&gt;&gt; = repository.pagedCharacters().cachedIn(viewModelScope)&#10;&#10;    // Se quiser buscar todos os personagens sem paginação:&#10;    suspend fun getAllCharacters(): List&lt;Character&gt; = repository.getAllCharacters()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>